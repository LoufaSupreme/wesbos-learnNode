const mongoose = require('mongoose');
mongoose.Promise = global.Promise;
const slug = require('slugs');

const storeSchema = new mongoose.Schema({
    name: {
        type: String,
        trim: true, //trims uploaded strings before adding to the db
        required: 'Please enter a store name!' // could also just put true, however it is better to put an error msg like this
    },
    slug: String,
    description: {
        type: String,
        trim: true,
    },
    tags: [String],
    created: {
        type: Date,
        default: Date.now,
    },
    location: {
        type: {
            type: String,
            default: 'Point',
        },
        coordinates: [{
            type: Number,
            required: 'You must supply coordinates!',
        }],
        address: {
            type: String,
            required: 'You must supply an address!'
        },
    },
    photo: String,
    author: {
        type: mongoose.Schema.ObjectId,
        ref: 'User',
        required: 'You must supply an author'
    },
},
// add additional option to display virtual fields (like our reviews field) when displaying store data in JSON or as objects.
// without this, virtual fields would still be present, but they wouldn't be displayed when using res.json(), for example. 
{
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
});

// Define our indexes, to make querying more efficient
storeSchema.index({
    name: 'text',
    description: 'text',
});

// these need to be separate from the above indexes
storeSchema.index({
    location: '2dsphere',
})


storeSchema.pre('save', async function(next) {
    if (!this.isModified('name')) {
        next();  //skip it
        return;
    }
    this.slug = slug(this.name);
    // before we save a new store with this name, check to see if any other stores with that name already exist in database
    // this is important bc the slug is generated by the name, and the slug is used in the URLs for the indivudal store pages.  So, if the
    // name is the same and the slug is the same, then all stores with the same name will point to the same URL.
    // So... find all the stores with the same name and add a number to the end of the slug to make it unique. 
    const slugRegEx = new RegExp(`^(${this.slug})((-[0-9]*$)?)$`, 'i');
    const storesWithSlug = await this.constructor.find({ slug: slugRegEx });
    
    if (storesWithSlug.length) {
        this.slug = `${this.slug}-${storesWithSlug.length + 1}`;
    }
    next();
})

// make our own methods that we can call on the Store model (aka Store object)
// this will find all the tags
// important to use a proper "function()" here b/c we need to refer to "this"
// returns a promise
storeSchema.statics.getTagsList = function() {
    // tip: to visualize what's happening in the db w/ this aggregate, use res.json() in the storeController function that calls getTagsList to
    // print out what is being returned.
    return this.aggregate([
        { $unwind: '$tags' }, // makes a list of stores by tag 
        { $group: { _id: '$tags', count: { $sum: 1 } }},  // groups the stores by tag, and sums them up.  Creates new object like {"_id": "Tag Name", "count": 2}
        { $sort: { count: -1 }} // sort in descending order
    ]);
}

// get a list of the top rated stores
// returns a promise
storeSchema.statics.getTopStores = function() {
    return this.aggregate([
        // lookup stores and populate their reviews
        // this is very similar to the storeSchema.virtual('reviews') code below, but acts directly on mongoDB rather than on mongoose.  Don't ask me what that means
        // from: 'reviews' is the line that tells mongo which model to look at.  Mongo lowercases and adds an 's' to all model names, so Review becomes reviews...
        // so, this line in english is: go to the Review model, look at the store field of each review, aggregate the reviews for each unique store._id, and add a virtual field called 'reviews' to the store.
        // run res.json(stores) in storeController.getTopStores to see the output
        { $lookup: { from: 'reviews', localField: '_id', foreignField: 'store', as: 'reviews' } },
        // filter for items that have 2 or more reviews
        // reviews.1 is mongo's way of indexing (e.g. its like saying reviews[1])
        // so we are looking for stores which have a non null review entry in the second slot of the reviews array for that store (reviews[1])
        { $match: { 'reviews.1': { $exists: true } } },
        // add the averageRating field
        // note that project will add a new field, but will cause the rest of the fields (like store.author, store.photo, etc) to disappear..
        // so we need to manually add them back in...
        { $project: { 
            averageRating: { $avg: '$reviews.rating' },
            photo: '$$ROOT.photo', // $$ROOT is a reference to the original document (model instance) in mongoDB
            name: '$$ROOT.name',
            slug: '$$ROOT.slug',
            reviews: '$$ROOT.reviews',
        } },
        // sort it by our new field, highest reviews first
        { $sort: { averageRating: -1 } },
        // limit to 10
        { $limit: 10 }
    ]);
}

// get all reviews for a store:
// find reviews where the store._id === review.store id
storeSchema.virtual('reviews', {
    ref: 'Review', // link to the Review model
    localField: '_id',  // use the store._id as the target
    foreignField: 'store',  // and then look at the "store" field of the Review model for that store._id
})

// automaticlly populate the virtual field "reviews" on every store, so that the reviews field shows up in json
function autoPopulateReviews(next) {
    this.populate('reviews');
    next();
}

// auto populate review field everytime we find or findOne store
storeSchema.pre('find', autoPopulateReviews);
storeSchema.pre('findOne', autoPopulateReviews);

module.exports = mongoose.model('Store', storeSchema);